{"code":"import { useState, useEffect } from \"react\";\r\nconst initialValue = {\r\n    innerWidth: null,\r\n    innerHeight: null,\r\n    outerWidth: null,\r\n    outerHeight: null\r\n};\r\n/**\r\n * useWindowSize\r\n *\r\n * A hook that provides information of the dimensions of the window\r\n *\r\n * @return {WindowDimensions}  Dimensions of the window\r\n */\r\nexport function useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState(initialValue);\r\n    function fetchWindowDimensionsAndSave() {\r\n        setWindowSize({\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        });\r\n    }\r\n    // run on mount\r\n    useEffect(() => {\r\n        // run only once\r\n        fetchWindowDimensionsAndSave();\r\n    }, []);\r\n    // set resize handler once on mount and clean before unmount\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", fetchWindowDimensionsAndSave);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", fetchWindowDimensionsAndSave);\r\n        };\r\n    }, []);\r\n    return windowSize;\r\n}\r\n","dts":{"name":"/Users/bhargavponnapalli/oss/react-hooks/rooks/packages/window-size/lib/useWindowSize.d.ts","writeByteOrderMark":false,"text":"interface WindowDimensions {\r\n    innerWidth: number | null;\r\n    innerHeight: number | null;\r\n    outerWidth: number | null;\r\n    outerHeight: number | null;\r\n}\r\n/**\r\n * useWindowSize\r\n *\r\n * A hook that provides information of the dimensions of the window\r\n *\r\n * @return {WindowDimensions}  Dimensions of the window\r\n */\r\nexport declare function useWindowSize(): WindowDimensions;\r\nexport {};\r\n"}}
